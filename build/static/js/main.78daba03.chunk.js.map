{"version":3,"sources":["constants/actions.js","redux/reducers/user.js","redux/reducers/site.js","redux/reducers/index.js","redux/store.js","actions/authActions.js","components/Landing.js","App.js","index.js"],"names":["LOGIN","initialState","hipsterPercent","name","loggedIn","authToken","refreshToken","error","loading","combineReducers","user","state","action","type","types","Object","assign","site","createStore","rootReducer","applyMiddleware","thunk","logger","login","dispatch","getState","Landing","className","onClick","props","Component","connect","bindActionCreators","App","this","rootElement","document","getElementById","ReactDOM","render","store"],"mappings":"kOACaA,EAAQ,QCCfC,EAAe,CACjBC,eAAgB,KAChBC,KAAM,KACNC,UAAU,EACVC,UAAW,KACXC,aAAc,MCNZL,EAAe,CACjBM,MAAO,KACPC,SAAS,GCCEC,cAAgB,CAAEC,KFMlB,WAAwC,IAA/BC,EAA8B,uDAAtBV,EAAcW,EAAQ,uCAClD,OAAQA,EAAOC,MACX,KAAKC,EACD,OAAOC,OAAOC,OAAO,GAAIL,EAAO,CAC7BP,UAAU,EACTC,UAAWO,EAAOP,UAClBC,aAAcM,EAAON,eAE7B,QACI,OAAOK,IEfoBM,KDExB,WAAwC,IAA/BN,EAA8B,uDAAtBV,EAAcW,EAAQ,uCAG1C,OAFAA,EAAOC,KAEAF,KEJJO,cAAYC,EAAaC,YAAgBC,IAAOC,M,kCCAxD,SAASC,IACZ,OAAO,SAACC,EAAUC,GACdD,EAAS,CACLX,KAAMb,EACNM,aAAc,UACdD,UAAW,a,ICFjBqB,E,uKAEQ,IAAD,OACL,OACI,sBAAKC,UAAU,UAAf,UACI,wDACA,wCACA,qBAAKA,UAAU,sBAAf,SACI,mBAAGC,QAAS,kBAAM,EAAKC,MAAMN,SAA7B,SACI,wBAAQI,UAAU,cAAlB,8C,GATFG,aA4BPC,kBAAQ,MAPvB,SAA4BP,GACxB,MAAO,CACHD,MAAOS,YAAmBT,EAAOC,MAK1BO,CAAkCL,G,iBC1B3CO,E,mLAGEC,KAAKL,MAAMN,U,+BAGL,IAEEnB,EAAa8B,KAAKL,MAAMnB,KAAxBN,SAER,OACI,qBAAKuB,UAAU,MAAf,SAEQvB,EACI,cAAC,IAAD,IAEA,cAAC,EAAD,U,GAhBN0B,aAuCHC,mBAff,SAAyBpB,GACrB,MAAO,CACHD,KAAMC,EAAMD,KACZH,MAAOI,EAAMM,KAAKV,MAClBC,QAASG,EAAMM,KAAKT,YAI5B,SAA4BgB,GACxB,MAAO,CACHD,MAAOS,YAAmBT,EAAOC,MAK1BO,CAGZE,GC5CGE,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACT,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJL,K","file":"static/js/main.78daba03.chunk.js","sourcesContent":["// Auth related actions\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\n","import * as types from '../../constants/actions';\n\nconst initialState = {\n    hipsterPercent: null,\n    name: null,\n    loggedIn: false,\n    authToken: null,\n    refreshToken: null\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case types.LOGIN:\n            return Object.assign({}, state, {\n               loggedIn: true,\n                authToken: action.authToken,\n                refreshToken: action.refreshToken\n            });\n        default:\n            return state;\n    }\n}\n","\nconst initialState = {\n    error: null,\n    loading: false,\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport site from \"./site\";\n\nexport default combineReducers({ user, site });\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger'\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer, applyMiddleware(thunk, logger));\n","import axios from 'axios';\n\nimport {SERVER_URL} from '../constants/site';\nimport {LOGIN} from '../constants/actions';\n\nexport function login() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: LOGIN,\n            refreshToken: 'weoirnw',\n            authToken: 'woneiwq'\n        });\n    }\n}\n\n\n// export function login() {\n//     return async(dispatch, getState) => {\n//\n//         const {authToken, refreshToken} = getState().user;\n//\n//         if (!authToken || !refreshToken) {\n//             try {\n//                 const tokenResponse = await axios.get(`${SERVER_URL}/login`);\n//                 const { error } = tokenResponse;\n//             } catch (err) {\n//                 console.log(err);\n//             }\n//         }\n//\n//         return {\n//             type: LOGIN\n//         };\n//     }\n// }\n","import PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport { withRouter } from \"react-router-dom\";\nimport React, { Component } from 'react';\n\nimport {login} from '../actions/authActions';\n\nclass Landing extends Component {\n\n    render() {\n        return (\n            <div className=\"Landing\">\n                <h1> How Hipster Are You? </h1>\n                <h3> Blah </h3>\n                <div className=\"app-buttonContainer\">\n                    <a onClick={() => this.props.login()}>\n                        <button className=\"largeButton\"> Log In With Spotify </button>\n                    </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nLanding.propTypes = {\n    login: PropTypes.function\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        login: bindActionCreators(login, dispatch),\n    };\n}\n\n\nexport default connect(null, mapDispatchToProps)(Landing)\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Landing from './components/Landing';\nimport Results from './components/Results';\nimport PropTypes from \"prop-types\";\nimport {bindActionCreators} from \"redux\";\nimport {login} from \"./actions/authActions\";\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.props.login();\n    };\n\n    render() {\n\n        const { loggedIn } = this.props.user;\n\n        return (\n            <div className=\"App\">\n                {\n                    loggedIn ?\n                        <Results />\n                        :\n                        <Landing />\n                }\n            </div>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user,\n        error: state.site.error,\n        loading: state.site.loading\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        login: bindActionCreators(login, dispatch),\n    };\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n) (App);\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n    </Provider>,\nrootElement\n);\n"],"sourceRoot":""}